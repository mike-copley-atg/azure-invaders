// INPUTS:
// 1. player ship count
// 2. wave
// 3. shield states

// OUTPUTS:
// 1. player ship count
// 2. enemy ship count
// 3. shield states

const SIM_TIME_STEP_MS = 10;
const SIM_SIZE_X = 384;
const SIM_SIZE_Y = 384;
const SIM_EDGE_T_INCLUSIVE = 0;
const SIM_EDGE_L_INCLUSIVE = 0;
// dependent on:
// SIM_SIZE_Y
const SIM_EDGE_B_INCLUSIVE = 383;
// dependent on:
// SIM_SIZE_X
const SIM_EDGE_R_INCLUSIVE = 383;
const MIN_INVADER_MOVE_PIXELS_PER_SEC = 1;
const MAX_INVADER_MOVE_PIXELS_PER_SEC = 100;
const INVADER_MOVE_DOWN_PIXELS = 8;
const INVADER_SIZE_Y = 12;
const INVADER_SIZE_X = 16;
const INVADER_SPACE_SIZE_X = 8;
const INVADER_SPACE_SIZE_Y = 8;
const INVADER_GROUP_START_ROWS = 5;
const INVADER_GROUP_START_COLS = 11;
const INVADER_GROUP_START_EDGE_T_INCLUSIVE = 0;
// dependent on: 
// SIM_SIZE_X 
// INVADER_START_GROUP_COLS 
// INVADER_SIZE_X
// INVADER_SPACE_SIZE_X 
const INVADER_GROUP_START_EDGE_L_INCLUSIVE = 64;
// dependent on: 
// INVADER_GROUP_START_EDGE_T_INCLUSIVE
// INVADER_START_GROUP_ROWS
// INVADER_SIZE_Y
// INVADER_SPACE_SIZE_Y
const INVADER_GROUP_START_EDGE_B_INCLUSIZE = 72;
// dependent on:
// INVADER_GROUP_START_EDGE_L_INCLUSIVE
// SIM_SIZE_X
const INVADER_GROUP_START_EDGE_R_INCLUSIVE = 320;

// note: first 16 bits -> first frame, second 16 bits -> second frame
// note: bits are ordered top to bottom, left to right
const INVADER_TYPE_1_COLLISION_MASK = [
    0b00000000000000000000000000000000,
    0b00000011110000000000001111000000,
    0b00000111111000000000011111100000,
    0b00001111111100000000111111110000,
    0b00011111111110000001111111111000,
    0b00111111111111000011111111111100,
    0b00111111111111000010000000000100,
    0b00011111111110000011000000001100,
    0b00001111111100000011100000011100,
    0b00000111111000000011110000111100,
    0b00000011110000000011111111111100,
    0b00000000000000000000000000000000,
]
const INVADER_TYPE_2_COLLISION_MASK = [
    0b00000000000000000000000000000000,
    0b00000011110000000000001111000000,
    0b00000111111000000000011111100000,
    0b00001111111100000000111111110000,
    0b00011111111110000001111111111000,
    0b00111111111111000011111111111100,
    0b00111111111111000011111111111100,
    0b00111111111111000010111111110100,
    0b00111111111111000110011111100110,
    0b00111111111111001110001111000111,
    0b00111111111111001111111111111111,
    0b00000000000000000000000000000000,
]
const INVADER_TYPE_3_COLLISION_MASK = [
    0b00000000000000000000000000000000,
    0b00000011110000000000001111000000,
    0b00000111111000000000011111100000,
    0b00111111111111000011111111111100,
    0b00111111111111000110011111100110,
    0b00111111111111001110001111000111,
    0b00111111111111001110001111000111,
    0b00111111111111000110011111100110,
    0b00111111111111000011111111111100,
    0b00000111111000000000011111100000,
    0b00000011110000000000001111000000,
    0b00000000000000000000000000000000,
]

////////////////////////////////////////
// INITIALIZATION
////////////////////////////////////////

function calculateMovementSpeed(wave) {
}

function initializeInvaders() {

}

////////////////////////////////////////
// MOVEMENT PHASE FUNCTIONS
////////////////////////////////////////

var doChangeInvaderMoveDirection = false;
var invaderMoverFunction = moveInvadersLeft;

function moveInvaders() {
    if (doChangeInvaderMoveDirection) {
        moveInvadersDown();
        invaderMoverFunction === moveInvadersLeft ? moveInvadersRight : moveInvadersLeft;
        doChangeInvaderMoveDirection = false;
    } else {
        doChangeInvaderMoveDirection = invaderMoverFunction();
    }
}

function moveInvadersLeft() {

}

function moveInvadersRight() {

}

function moveInvadersDown() {

}